input AuthEmailLoginDto {
  email: String!
  password: String!
}

input AuthForgotPasswordDto {
  email: String!
}

type AuthGoogle {
  # Example field (placeholder)
  exampleField: Int!
}

input AuthGoogleLoginDto {
  idToken: String!
}

enum AuthProvidersEnum {
  email
  facebook
  google
  twitter
  apple
}

input AuthRegisterLoginDto {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  image: CreateUsersFileDto
  phone: String!
}

type AuthRegisterResponseDto {
  userId: Int!
  expiryDate: Float!
}

type Cart {
  id: ID!
  userId: Float!
  productId: Float!
  quantity: Float!
  price: Float!
  discount: Float
  user: User!
}

type Category {
  id: ID!
  name: String!
  image: LibraryFileEntity
  products: [Product!]
}

input ConfirmEmailDto {
  otp: String!
  userId: Int!
}

input CreateCartDto {
  userId: Float
  productId: Float!
  quantity: Float!
  price: Float!
  discount: Float
}

input CreateCategoryDto {
  name: String!
  image: CreateLibraryFileDto
}

input CreateDonationDto {
  userId: Float!
  productId: Float
  description: String
}

input CreateLibraryFileDto {
  path: String!
}

input CreateProductDto {
  storeId: Float!
  name: String!
  stock: Float
  price: Float
  type: ProductTypeEnum
  description: String!
  image: [CreateLibraryFileDto!]
  isCollection: Boolean
  parentId: Float
  categoryId: Float!
}

input CreateStoreDto {
  ownerId: Float
  name: String!
  bio: String
  description: String!
  image: CreateLibraryFileDto
}

input CreateSwapDto {
  userId: Float!
  quantity: Float!
  description: String
  productId: Int
}

input CreateUserDto {
  email: String!
  password: String!
  phone: String!
  provider: String
  socialId: String
  firstName: String!
  lastName: String!
  role: ID
  status: ID
  hash: String
}

input CreateUsersFileDto {
  path: String!
}

# A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
scalar DateTime

type Donation {
  id: ID!
  userId: Float!
  productId: Float
  description: String
  status: DonationStatusEnum!
  product: Product
}

enum DonationStatusEnum {
  PENDING
  ACCEPTED
  REJECTED
}

type LibraryFileEntity {
  # Unique identifier
  id: ID!
  path: String!
}

type Location {
  id: ID!
  country: String!
  city: String!
  address: String!
  store: Store!
}

type LoginResponse {
  token: String!
  refreshToken: String!
  tokenExpires: Float!
  user: User
}

type Mutation {
  createCart(createCartDto: CreateCartDto!): Cart!
  createDonation(createDonationDto: CreateDonationDto!): Donation!
  updateDonation(updateDonationDto: UpdateDonationDto!): Donation!
  removeDonation(id: Float!): Boolean!
  createSwap(createSwapDto: CreateSwapDto!): Swap!
  updateSwap(input: UpdateSwapDto!): Swap!
  deleteSwap(id: Float!): Boolean!
  createStore(createStoreDto: CreateStoreDto!): Store!
  updateStore(input: UpdateStoreDto!): Store!
  deleteStore(id: Float!): Boolean!
  createProduct(createProductDto: CreateProductDto!): Product!
  updateProduct(input: UpdateProductDto!): Product!
  deleteProduct(id: Float!): Boolean!
  createCategory(createCategoryDto: CreateCategoryDto!): Category!
  updateCategory(updateCategoryDto: UpdateCategoryDto!): Category!
  removeCategory(id: Int!): Category!
  registerUser(
    authRegisterLoginDto: AuthRegisterLoginDto!
  ): AuthRegisterResponseDto!
  confirmEmail(confirmEmailDto: ConfirmEmailDto!): Boolean!
  resendOtp(resendOtpDto: ResendOtpDto!): AuthRegisterResponseDto!
  loginByEmail(authEmailLoginDto: AuthEmailLoginDto!): LoginResponse!
  forgetPasswordEmail(
    forgotPasswordDto: AuthForgotPasswordDto!
  ): AuthRegisterResponseDto!
  resetPassword(resetPasswordDto: ResetPasswordDto!): Boolean!
  confirmOTP(confirmEmailDto: ConfirmEmailDto!): Boolean!
  createUser(createUserDto: CreateUserDto!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  googleLogin(authGoogleLoginDto: AuthGoogleLoginDto!): AuthGoogle!
}

type Product {
  id: ID!
  productId: ID
  donations: [Donation!]
  swaps: [Swap!]
  name: String!
  quantity: Float
  stock: Float
  price: Float
  description: String!
  isCollection: Boolean!
  type: ProductTypeEnum!
  image: [LibraryFileEntity!]
  store: Store!
  category: Category!
  subProducts: [Product!]
  parent: Product
}

enum ProductTypeEnum {
  DONATION
  SWAP
  SALE
}

type Query {
  findAllCarts: [Cart!]!
  findAllDonations: [Donation!]!
  findOneDonation(id: Float!): Donation!
  findAllSwap: [Swap!]!
  findOneSwap(id: Float!): Swap!
  findAllStore: [Store!]!
  findOneStore(id: Float!): Store
  findAllProducts: [Product!]!
  findOneProduct(id: Float!): Product
  findAllCategories: [Category!]!
  findOneCategory(id: Int!): Category
  refresh: LoginResponse!
  findMe: User!
  logout: SoftDeleteResult!
  users: [User!]!
  user(id: Int!): User!
}

input ResendOtpDto {
  userId: Int!
}

input ResetPasswordDto {
  password: String!
  userId: Int!
}

type Role {
  id: ID!
  name: String!
}

type SoftDeleteResult {
  affected: Int!
}

type Status {
  id: ID!
  name: String!
}

type Store {
  id: ID!
  ownerId: Float!
  name: String!
  bio: String!
  description: String!
  image: LibraryFileEntity
  locations: [Location!]
  products: [Product!]
  user: User
}

type Swap {
  id: ID!
  userId: Float!
  productId: Float
  description: String
  status: SwapStatusEnum!
  quantity: Float!
  product: Product
}

enum SwapStatusEnum {
  PENDING
  REJECTED
  APPROVED
}

input UpdateCategoryDto {
  name: String
  image: CreateLibraryFileDto
  id: Int!
}

input UpdateDonationDto {
  userId: Float
  productId: Float
  description: String
  id: ID!
}

input UpdateProductDto {
  storeId: Float
  name: String
  stock: Float
  price: Float
  type: ProductTypeEnum
  description: String
  image: [CreateLibraryFileDto!]
  isCollection: Boolean
  parentId: Float
  categoryId: Float
  id: ID!
}

input UpdateStoreDto {
  ownerId: Float
  name: String
  bio: String
  description: String
  image: CreateLibraryFileDto
  id: ID!
}

input UpdateSwapDto {
  userId: Float
  quantity: Float
  description: String
  productId: Int
  id: ID!
}

input UpdateUserInput {
  # Example field (placeholder)
  exampleField: Int
  id: Int!
}

type User {
  id: ID!
  carts: [Cart!]
  stores: [Store!]!
  email: String
  password: String
  provider: AuthProvidersEnum!
  socialId: String
  firstName: String
  lastName: String
  image: UsersFileEntity
  phone: String!
  role: Role
  status: Status
  deletedAt: DateTime
}

type UsersFileEntity {
  # Unique identifier
  id: ID!
  path: String!
}
